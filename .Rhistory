bind_col(quad$median)
meuse_sf |>
mutate(sign = case_when(
Pr < 0.05 ~ 'Significativo',
.default = 'No Significativo')) |>
bind_cols(quad$median)
meuse_sf |>
mutate(sign = case_when(
Pr < 0.05 ~ 'Significativo',
.default = 'No Significativo')) |>
bind_cols(quad = quad$median)
tm_shape(meuse_sf) +
tm_fill(col='quad')
tm_shape(meuse_sf) +
tm_dots(col='quad')
#| echo: true
meuse_sf <- meuse_sf |>
mutate(sign = case_when(
Pr < 0.05 ~ 'Significativo',
.default = 'No Significativo')) |>
bind_cols(quad = quad$median)
tm_shape(meuse_sf) +
tm_dots(col='quad')
meuse_sf <- meuse_sf |>
bind_cols(quad = quad$median) |>
mutate(quad = case_when(
Pr < 0.05 ~ quad,
.default = 'No Significativo')) |>
```
meuse_sf |>
bind_cols(quad = quad$median)
meuse_sf <- meuse_sf |>
bind_cols(quad = quad$median) |>
mutate(quad = case_when(
Pr < 0.05 ~ quad,
.default = 'No Significativo'))
meuse_sf
set.seed(0)
(d <- sample(100, 10))
a <- d[-length(d)]
b <- d[-1]
plot(a, b, xlab='t', ylab='t-1')
cor(a,b)
(d <- sort(d))
a <- d[-length(d)]
b <- d[-1]
cor(a,b)
plot(a, b, xlab='t', ylab='t-1')
acf(d)
library(terra)
p <- vect(system.file("external/lux.shp", package="raster"))
p <- p[p$NAME_1=="Diekirch", ]
#p$value <- c(10, 6, 4, 11, 6)
data.frame(p)
par(mai=c(0,0,0,0))
plot(p, col=2:7)
xy <- centroids(p)
points(xy, cex=6, pch=20, col='white')
text(p, 'ID_2', cex=1.5)
library(spdep)
w <- adjacent(p, symmetrical = TRUE)
class(w)
## [1] "nb"
summary(w)
plot(p, col='gray', border='blue', lwd=2)
p1 <- xy[w[,1],]
p2 <- xy[w[,2],]
lines(p1,p2,col = 'red', lwd = 2)
(wm <- adjacent(p, pairs=FALSE))
(n <- length(p))
y <- p$AREA
ybar <- mean(y)
dy <- y - ybar
g <- expand.grid(dy, dy)
yiyj <- g[,1] * g[,2]
pm <- matrix(yiyj, ncol=n)
pmw <- pm * wm
spmw <- sum(pmw)
smw <- sum(wm)
sw  <- spmw / smw
(vr <- n / sum(dy^2))
(MI <- vr*sw)
(EI <- -1/(n-1))
(ww <-  adjacent(p, "queen", pairs = FALSE))
autocor(p$AREA, ww, "moran")
m <- sapply(1:99, function(i) {
autocor(sample(p$AREA), ww, "moran")
})
hist(m)
n <- length(p)
(ms <- cbind(id=rep(1:n, each=n), y=rep(y, each=n), value=as.vector(wm * y)))
ms <- ms[ms[,3] > 0, ]
ams <- aggregate(ms[,2:3], list(ms[,1]), FUN=mean)
ams <- ams[,-1]
colnames(ams) <- c('y', 'spatially lagged y')
head(ams)
plot(ams)
reg <- lm(ams[,2] ~ ams[,1])
abline(reg, lwd=2)
abline(h=mean(ams[,2]), lt=2)
abline(v=ybar, lt=2)
coefficients(reg)[2]
library(spdep)
library(sp)
data(meuse)
meuse.sf <- st_as_sf(meuse,coords=c('x','y'))
w <- 1/as.matrix(st_distance(meuse.sf))
diag(w) <- 0
w <- mat2listw(w)
moran(meuse$copper,w,n=length(w$neighbours),S0=Szero(w))
moran.mc(meuse$copper,w,nsim=10000)
moran.plot(meuse$copper,w)
moran.mc(meuse$zinc,w,nsim=10000)
moran.plot(meuse$zinc,w)
moran.mc(meuse$cadmium,w,nsim=10000)
moran.plot(meuse$cadmium,w)
#| echo: true
lmoran <- localmoran(meuse$zinc, w, alternative = "greater")
head(lmoran)
#| echo: true
meuse_sf <- st_as_sf(meuse[c('x','y','zinc')],coords = c('x','y'),crs = 28992)
meuse_sf$Ii <- lmoran[,'Ii']
meuse_sf$Z <- lmoran[,'Z.Ii']
meuse_sf$Pr <- lmoran[, "Pr(z > E(Ii))"]
library(tmap)
p1 <- tm_shape(meuse_sf) +
tm_dots(col = "zinc", title = "Zinc", style = "quantile") +
tm_layout(legend.outside = TRUE)
p2 <- tm_shape(meuse_sf) +
tm_dots(col = "Ii", title = "Índice de Moran Local",
style = "quantile") +
tm_layout(legend.outside = TRUE)
p3 <- tm_shape(meuse_sf) +
tm_dots(col = "Z", title = "Z-score",
breaks = c(-Inf, 1.65, Inf)) +
tm_layout(legend.outside = TRUE)
p4 <- tm_shape(meuse_sf) +
tm_dots(col = "Pr", title = "p-value",
breaks = c(-Inf, 0.05, Inf)) +
tm_layout(legend.outside = TRUE)
#| echo: true
tmap_mode('view')
tmap_arrange(p1,p2,p3,p4)
#| echo: true
quad <- attr(lmoran,'quadr')
head(quad)
#| echo: true
meuse_sf <- meuse_sf |>
bind_cols(quad = quad$median) |>
mutate(quad = case_when(
Pr < 0.05 ~ quad,
.default = 'No Significativo'))
tm_shape(meuse_sf) +
tm_dots(col='quad')
region <- read_rds('data/procesada/regs_utm.rds')
region <- read_rds('Talleres/data/procesada/regs_utm.rds')
region <- read_rds('Talleres/data/procesada/regs_utm_sf.rds')
data_temp_ene <- read_rds('Talleres/data/procesada/data_temp_enero.rds')
bb <- st_bbox(region)
bb$xmin
?rast
rast(bb$xmin,bb$xmax,bb$ymin,bb$ymax,res=500)
rast(xmin = bb$xmin,xmax= bb$xmax,ymin = bb$ymin,ymax = bb$ymax,res=500)
grilla <- rast(xmin = bb$xmin,xmax= bb$xmax,ymin = bb$ymin,ymax = bb$ymax,res=500)
xy <- xyFromCell(grilla)
xy <- xyFromCell(grilla,1:ncell(grilla))
dist <- grilla
xy
xy <- xyFromCell(grilla,1:ncell(grilla)) |>
st_as_sf(coords = c('x','y'),crs = 32719)
class(xy)
xy <- xyFromCell(grilla,1:ncell(grilla)) |>
as_tibble() |>
st_as_sf(coords = c('x','y'),crs = 32719)
xy
nrow(xy)
xy
i <- 1
values(grilla) <- st_distance(xy,data_temp[i,]) |> as.numeric()
grilla
plot(grilla)
d <- lapply(1:5,\(i){
values(dist) <- st_distance(xy,data_temp[i,]) |> as.numeric()
dist
})
d
rast(d)
rast(d) |> plot()
plot(st_geometry(data_temp_ene),add = TRUE)
plot(rast(d[[1]]))
plot(st_geometry(data_temp_ene),add = TRUE)
plot(rast(d[[1]]))
plot(vect(data_temp_ene),add = TRUE)
d
plot(d[[1]])
plot(vect(data_temp_ene),add = TRUE)
plot(d[[1]])
plot(vect(data_temp_ene)[1],add = TRUE)
d <- lapply(1:nrow(data_temp_d),\(i){
values(dist) <- st_distance(xy,data_temp[i,]) |> as.numeric()
dist
})
grilla <- rast(xmin = bb$xmin,xmax= bb$xmax,ymin = bb$ymin,ymax = bb$ymax,res=500)
xy <- xyFromCell(grilla,1:ncell(grilla)) |>
as_tibble() |>
st_as_sf(coords = c('x','y'),crs = 32719)
dist <- grilla
d <- lapply(1:nrow(data_temp_enero),\(i){
values(dist) <- st_distance(xy,data_temp[i,]) |> as.numeric()
dist
})
d <- lapply(1:nrow(data_temp_ene),\(i){
values(dist) <- st_distance(xy,data_temp[i,]) |> as.numeric()
dist
})
d
d <- rast(d)
writeRaster(d,'Talleres/data/procesada/predictores_espaciales.tif')
d[[1]]
v1 <- 1:3
v2 <- 4:6
v1 < 2 $ v2==5
v1
v2
v1 <- 1:3
v2 <- 4:6
v1 < 2 & v2==5
v1 <- 1:3
v2 <- 4:6
v1 <= 2 & v2==5
r <- rast(xmin=0,xmax=10,ymin=0,ymax=10,ncol=5,nrow=5)
r
values(r) <- 1:25
plot(r)
r <- rast(xmin=0,xmax=10,ymin=0,ymax=10,ncol=5,nrow=5)
r |> as.polygons() |> plot()
m <- rbind(c(0,0), c(0,5),c(5,5),c(5,0))
s <- st_multipoint(m)
s
st_sf(s)
?st_sf
g = st_sfc(st_point(1:2))
st_sf(a=3,g)
#| echo: true
data("zion_points", package = "spDataLarge")
zion_points
st_as_sf(zion_points)
plot(elevation)
#| echo: true
data("zion_points", package = "spDataLarge")
elevation = terra::extract(srtm, zion_points)
#| echo: true
library(spDataLarge)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
library(terra)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion = read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
zion = st_transform(zion, st_crs(srtm))
library(sf)
zion = read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
zion = read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
zion = st_transform(zion, st_crs(srtm))
#| echo: false
plot(srtm)
plot(zion,add = TRUE,col='transparent')
#| echo: true
data("zion_points", package = "spDataLarge")
elevation = terra::extract(srtm, zion_points)
zion_points = cbind(zion_points, elevation)
plot(elevation)
plot(srtm)
plot(zion,col='transparent',add = TRUE)
plot(st_as_sf(zion_points),add = TRUE)
iris |>
lm(Sepal.Length~Sepal.Width,data = _)
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary()
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |>
_$coefficients
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary()
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |>
_coefficients
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary()
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |> str()
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |>
_[4]
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |>
_[[4]]
iris |>
lm(Sepal.Length~Sepal.Width,data = _) |>
summary() |>
_[4,1]
mtcars |> _$cyl
sessionInfo()
library(terra)
?rast
f <- system.file("ex/elev.tif", package="terra")
origin(f)
r <- rast(f)
origin(r)
ext(r)
plot(r)
plot(nz_height)
??nz_height
library(spData)
??nz_height
plot(nz_height)
plot(spData::nz_height)
spData::nz_height
spData::nz_height |> plot()
spData::nz_height |> names()
spData::nz_height |> st_as_sf(geom = 'geometry() |> plot()
spData::nz_height |> st_as_sf(geom = 'geometry') |> plot()
library(sf)
spData::nz_height |> st_as_sf(geom = 'geometry') |> plot()
nz |>
dplyr::filter(Name == 'Canterbury')
nz |>
dplyr::filter(Name == 'Canterbury') |> plot()
nz |>
dplyr::filter(Name == 'Canterbury') |>
st_join(nz_height |> st_as_sf(geom = 'geometry'))
nz |>
dplyr::filter(Name == 'Canterbury') |>
st_join(nz_height |> st_as_sf(geom = 'geometry')) |> plot()
rows_sel<- nz$Name == 'Canterbury'
canterbury <- nz[rows_sel,]
cant_height <- nz_height[canterbury,]
can_heoght
can_height
cant_height
cant_height |> plot()
canterbury
rows_sel
nz_height[canterbury]
nz_height
canterbury
nz_height[canterbury]
nz_height[canterbury,]
class(nz_height)
## 1. Simplificación {.smaller .scrollable background-image="https://user-images.githubusercontent.com/520851/34887433-ce1d130e-f7c6-11e7-83fc-d60ad4fae6bd.gif" background-position="97.5% 2.5%" background-size="7.5%"}
La `simplificación` es un proceso de generalización de objetos vectoriales (líneas y polígonos) generalmente para su uso en mapas de menor escala.
## 1. Simplificación {.smaller .scrollable background-image="https://user-images.githubusercontent.com/520851/34887433-ce1d130e-f7c6-11e7-83fc-d60ad4fae6bd.gif" background-position="97.5% 2.5%" background-size="7.5%"}
La `simplificación` es un proceso de generalización de objetos vectoriales (líneas y polígonos) generalmente para su uso en mapas de menor escala.
data("us_states")
us_states
us_states[,'NAME']
us_states['NAME']
library(pak)
pak:pak("r-tmap/tmap")
library(tmap)
package_version('tmap')
?package_version
packageVersion('tmap')
}?tm_layout
?tm_layout
?tm_pos
library(spData)
library(spDataLarge)
library(basemaps)
library(raster)
set_defaults(map_service = "mapbox", map_type = "satellite",
map_token = 'pk.eyJ1IjoiZnJ6YW1icmEiLCJhIjoiY2tqdmw5Z3QxMDZyZjJydG54M2RobWMyeSJ9.rl8_KzhiKaV0wgsLL2Y1WQ')
nz <- spData::nz
nz_height <- spData::nz_height
world <- spData::world
#elev <- spData::elev
#grain <- spData::grain
nz_elev <- raster(system.file("raster/nz_elev.tif", package = "spDataLarge"))
urban_agglomerations <- spData::urban_agglomerations
mcol2 <- tm_shape(nz) + tm_polygons(col = "Median_income", breaks = breaks) + tm_legend(orientation = 'landscape')
mcol2
mcol2 <- tm_shape(nz) + tm_polygons(col = "Median_income", breaks = breaks) + tm_legend(orientation = 'landscape')
mcol2
mcol2 <- tm_shape(nz) + tm_polygons(col = "Median_income", breaks = breaks,fill.legend =  tm_legend(orientation = 'landscape')) +
mcol3 <- tm_shape(nz) + tm_polygons(col = "Median_income", n = 10)
mcol2 <- tm_shape(nz) + tm_polygons(col = "Median_income", breaks = breaks,fill.legend =  tm_legend(orientation = 'landscape'))
mcol2
mcol2 <- tm_shape(nz) + tm_polygons(fill = "Median_income", breaks = breaks,fill.legend =  tm_legend(orientation = 'landscape'))
mcol2
tmap_mode('view')
tm_shape(nz) + tm_polygons()
?tm_facets
tm_shape(world_coffee) +
tm_polygons(facets) +
tm_facets(ncol = 2, sync = TRUE)
world_coffee <-  merge(world, coffee_data, by = "name_long")
facets = c("coffee_production_2016", "coffee_production_2017")
tm_shape(world_coffee) +
tm_polygons(facets) +
tm_facets(ncol = 2, sync = TRUE)
tm_shape(world_coffee) +
tm_polygons(facets) +
tm_facets(ncol = 2, byrow = FALSE, sync = TRUE)
ggplot(x=1:100,y=1:00) + geom_point()
library(ggplot2)
ggplot(x=1:100,y=1:00) + geom_point()
ggplot(aes(x=1:100,y=1:00)) + geom_point()
ggplot(aes(tibble(x=1:100,y=1:100))) + geom_point()
ggplot(x=1:100,y=1:100) + geom_point()
ggplot(tibble(x=1:100,y=1:100),aes(x,y)) + geom_point()
library(tibble)
ggplot(tibble(x=1:100,y=1:100),aes(x,y)) + geom_point()
mpg
?mpg
iris
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position = 'jitter')
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position = 'jitter')
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position = 'jitter')
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position = 'jitter')
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position =position_nudge(x=1))
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position =position_nudge(x=1))
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position =position_nudge(x=1))
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(position ='jitter')
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point()
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point(stat_smooth())
?stat_smooth
ggplot(iris,aes(Sepal.Length,Sepal.Width)) + geom_point() +stat_smooth()
#| echo: true
ggplot(iris,aes(Sepal.Length,Sepal.Width)) +
#para crear un gráfico de puntos
geom_point() +
# para ajustar y superponer una linea de tendencia loess.
geom_smooth(fromula=y~x,method = "lm")
names(iris)
scale_color_brewer('Set1)
iris |> glimpse()
iris_mod <- iris |>
mutate(cat_plength = cut(Sepal.Length))
library(dplyr)
iris_mod <- iris |>
mutate(cat_plength = cut(Sepal.Length))
iris_mod <- iris |>
mutate(cat_plength = cut(Sepal.Length))
iris_mod <- iris |>
mutate(cat_plength = cut(Sepal.Length,quantile(Sepal.Length)))
iris_mod
iris_mod <- iris |>
mutate(cat_plength = cut(Sepal.Length,quantile(Sepal.Length)))
iris_mod
ggplot(iris_mod,aes(Sepal.Length,Sepal.Width),color = Species) +
geom_point() +
scale_color_brewer(palette = 'Set1') +
facet_grid(Species~cat_plength)
ggplot(iris_mod,aes(Sepal.Length,Sepal.Width,color = Species)) +
geom_point() +
scale_color_brewer(palette = 'Set1') +
facet_grid(Species~cat_plength)
?cut
?coord_fixed
ggplot(iris,aes(Sepal.Length,Sepal.Width,color = Species)) +
geom_point() +
scale_color_brewer(palette = 'Set1') + coord_polar()
ggplot(iris,aes(Sepal.Length,Sepal.Width,color = Species)) +
geom_point() +
scale_color_brewer(palette = 'Set1') + coord_equal()
ggplot(iris,aes(Sepal.Length,Sepal.Width,color = Species)) +
geom_point() +
scale_color_brewer(palette = 'Set1') + coord_fixed()
?coord_equal
oz_states
sf_read
?sf_read
library(spData)
library(spDataLarge)
library(basemaps)
library(raster)
set_defaults(map_service = "mapbox", map_type = "satellite",
map_token = 'pk.eyJ1IjoiZnJ6YW1icmEiLCJhIjoiY2tqdmw5Z3QxMDZyZjJydG54M2RobWMyeSJ9.rl8_KzhiKaV0wgsLL2Y1WQ')
nz <- spData::nz
nz_height <- spData::nz_height
world <- spData::world
#elev <- spData::elev
#grain <- spData::grain
nz_elev <- raster(system.file("raster/nz_elev.tif", package = "spDataLarge"))
urban_agglomerations <- spData::urban_agglomerations
library(sf)
?sf_read
?read_sf
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
ggplot(data = nc) +
geom_sf
ggplot(data = nc) +
geom_sf()
ggplot(data = nc) +
geom_sf() +
coord_sf()
?coord_sf
library(tidyterra)
temp
ggplot(data =nc) +
geom_spatvector()
nc
