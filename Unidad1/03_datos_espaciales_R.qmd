---
title: 'Análisis Espacial con R'
subtitle: "Datos Espaciales en R"
author: 'Dr. Francisco Zambrano Bigiarini'
institute: "Hemera, Universidad Mayor"
format: 
  revealjs:
    logo: ../imgs/logo_hemera_2024.png
    css: ../logo.css
    revealjs-plugins:
      - drop
    drop:
      shortcut: "]"
slide-number: true
editor: visual
---

## Contenidos {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

1. Datos espaciales en R
2. Datos espaciales vectoriales
3. Datos espaciales raster
4. Manejo de SRC
5. Operaciones espaciales con datos vectoriales
6. Operaciones espaciales con datos raster
    

## 1. Datos espaciales en `R` {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de dato espaciales**

-   `Discretos` : datos vectoriales
-   `Continuos` : datos raster

**Simple representación de datos espaciales**

```{r, echo=TRUE}
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
               -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
              36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# Simulated rainfall data
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r eval=FALSE,echo=TRUE}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

### Simple representación de datos espaciales

```{r echo=FALSE,eval=TRUE,fig.height=6}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r}
#|eval: false
#|echo: true
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r echo=FALSE,fig.height=6}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

Podemos almacenar datos espaciales en un `data.frame`

```{r}
wst <- data.frame(longitude, latitude, name, precip)
wst
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`**

-   Utilizaremos `{sf}`

-   Tener cuidado ya que el más utilizado por mucho tiempo fue `{sp}` (mas antiguo)

-   Muchos ejemplos o incluso usos que vean por ahí estarán con los tipos de datos definidos por `{sp}`

-   `{sp}` está siendo (o ya fue) reemplazado por `{sf}`

> **Simple Feature:** se refiere a un estándar formal (ISO 19125-1: 2004) que describe cómo los objetos en el mundo real se pueden representar en computadoras, con énfasis en la geometría espacial de estos objetos.

<https://github.com/r-spatial/sf/>

##  {background-image="figs/sf_image.jpg" background-size="contain"}

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Dimensiones**

-   Todas las geometrias (puntos, lineas, polígonos) están formadas por puntos.
-   2, 3, o 4 dimensiones
-   Todos los puntos en una geometría tienen la misma dimensión
-   Ademas de `X` e `Y` hay dos opciones
    -   coordenada `Z` para altitud
    -   coordenada `M` medición asociada con el punto (ej, tiempo en que fue medido)

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Dimensiones**

-   Cuatro casos posibles:
    -   2D (X,Y), (E, N), (Lon,Lat): `XY`
    -   3D : `XYZ`
    -   3D : `XYM`
    -   4D : `XYZM`

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Tipos de geometrías**

| Tipo | Descripción |
|------------------------------------|------------------------------------|
| `POINT` | geometría dimensión cero, un punto |
| `LINESTRING` | varios puntos, secuencia de puntos conectados por líneas rectas que no se intersecan; geometría unidimensional |
| `POLYGON` | geometría con un área positiva (bidimensional); la secuencia de puntos forma un anillo cerrado que no se interseca |
| `MULTIPOINT` | grupo de `POINT` |
| `MULTILINESTRING` | grupo de `LINESTRING` |
| `MULTIPOLYGON` | grupo de `POLYGON` |
| `GEOMETRYCOLLECTION` | grupo de geometrías de cualquier tipo |

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clases**

`Geometria` -\> `list-column` (tipo de dato)\
`Atributos` -\> `data.frame`

Como `{sf}` almacena las `Simple Features`.

Los tres tipos de datos utilizados para representarlos son:\
- `sf`: la tabla (`data.frame`) con los atributos y geometría de la entidad , que contiene\
- `sfc` : la `list-colum` con la geometría de cada entidad (registro), que está compuesto de\
- `sfg`: la geometría de la entidad de cada `simple feature` individual

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Resumiendo la clases `sf`**

![](figs/sf_class_diagram.png)

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r fig.height=5}
#| echo: true
plot(nc[1])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
class(nc)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
lapply(attributes(nc),'head')
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
print(nc[9:15], n = 3)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

![](figs/sf_xfig.png)

<i style="color:green">VERDE: Simple Feature individual, atributos + geometría </i>\
<i style="color:blue">AZUL: geometría (objeto de clase `sfg`) </i>\
<i style="color:red">ROJO: Simple Feature `list-column` (`sfc`) </i>

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

`sfc` (simple feature list-column)

**Simple Feature `{sf}`: Clase `sfc`**

```{r}
#| echo: true
(nc_geom <- st_geometry(nc))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r}
#| echo: true
class(nc_geom)
nc_geom[[1]]
class(nc_geom[[1]])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r fig.height=6}
#| echo: true
plot(nc_geom[[1]])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r fig.height=6}
#| echo: true
names(attributes(nc_geom))
attr(nc_geom,'crs')
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

`sfg` (simple feature geometry) guarda la geometría de un a entidad individual, ej. un punto, una linea o polígono

Está implementada en en tipos de datos nativos de R (numeric, matrix, list), siguiendo la siguiente regla:

1.  un `POINT` es unj vector numérico
2.  un grupo de puntos, e.j. un `LINESTRING` o un anillo de un `POLYGON` es un `matrix` y cada fila de la `matrix` es un `POINT`
3.  cualquier otro grupo es un `list`

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
(x <- st_point(c(1,2)))
str(x)
(x <- st_point(c(1,2,3)))
str(x)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
(x <- st_point(c(1,2,3), "XYM"))
str(x)
(x <- st_point(c(1,2,3,4)))
str(x)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
st_zm(x, drop = TRUE, what = "ZM")
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
p <- rbind(c(3.2,4), c(3,4.6), c(3.8,4.4), c(3.5,3.8), c(3.4,3.6), c(3.9,4.5))
(mp <- st_multipoint(p))
s1 <- rbind(c(0,3),c(0,4),c(1,5),c(2,5))
(ls <- st_linestring(s1))
s2 <- rbind(c(0.2,3), c(0.2,4), c(1,4.8), c(2,4.8))
s3 <- rbind(c(0,4.4), c(0.6,5))
(mls <- st_multilinestring(list(s1,s2,s3)))

```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
pol <-st_polygon(list(p1,p2))
p3 <- rbind(c(3,0), c(4,0), c(4,1), c(3,1), c(3,0))
p4 <- rbind(c(3.3,0.3), c(3.8,0.3), c(3.8,0.8), c(3.3,0.8), c(3.3,0.3))[5:1,]
p5 <- rbind(c(3,3), c(4,2), c(4,3), c(3,3))
(mpol <- st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5))))
(gc <- st_geometrycollection(list(mp, mpol, ls)))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r eval = FALSE}
#| echo: true
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r echo=FALSE,fig.height=6,fig.width=10}
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

1.  Vamos a utilizar el paquete `{terra}`
2.  `{terra}` está reemplazando a `{raster}`, ya que es más simple y rapido
3.  `{terra}` es nuevo, fue lanzado el 2020:

-   Ya hay documentación y ejemplos
-   Otros paquetes que utilizan datos espaciales se están actualizando para dar soporte a `{terra}`
-   El paso de `{raster}` a `{terra}` no es complicado
-   las funciones son muy similares a `{raster}`.

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

El paquete `{terra}` tiene funciones para crear, leer, manipular y guardar datos raster y vectoriales.

Las clases definidas por `{terra}` son:\
- `SpatRaster`\
- `SpatVector`

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

-   Representa bandas de información.
-   Guarda información número de columnas y filas, extensión espacial, el sistema de referencia de coordenadas, extensión.

```{r}
#| echo: true
library(terra)
(r <- rast(ncol=10, nrow=10, xmax=-80, xmin=-150, ymin=20, ymax=60))
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

El objeto `r` solo tiene el esqueleto del raster, pero aún no tiene valores

```{r}
#echo: true
values(r) <- 1:100
r
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

```{r fig.height=5}
#| echo: true
plot(r)
text(r)
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos:spatRaster multicapa**

-   Puede trabajar con un archvivo raster de mutiples capas (Ej, imagen satelital)
-   Puede trabajar con datos raster desde diferentes archivos (Ej., series de tiempos guardados en archivos independientes.

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster multicapa**

```{r}
#| echo: true
r2 <- r * r
r3  <- sqrt(r)
(s <- c(r, r2, r3))
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster multicapa**

```{r,echo=FALSE,fig.width=10,fig.height=6}
plot(s)
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

-   `Coordenadas geográficas`: esféricas\
-   `Coordenadas proyectadas`: cónica, cilíndrica y planas

Para manejar `CRS` `R` utiliza la librería [`PROJ`](https://proj.org/)

`PROJ.4` fue usado por más de 30 años, luego mutó a $PR \phi J$, dando paso a `PROJ5`, `PROJ6` y ahora `PROJ7`. `PROJ8` en 2021.

Así, hay tres formatos para manejar los `CRS`

-   proj.4
-   EPSG
-   Well-known Text (wkt)

`{sf}` usa wkt (well-known text) o EPSG

`{terra}` usa PROJ.4, wkt o EPSG

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.1 Datos vectoriales: `{sf}`**

Versiones anteriores de `{sf}` (\<0.9) ![](figs/crs_sf1.png)\~

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.1 Datos vectoriales: `{sf}`**

Ahora

```{r}
#| echo: true
st_crs(4326)
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.1 Datos vectoriales: `{sf}`**

Recomendación utilizar `EPSG (European Petroleum Survey Group)` y `wkt` para identificar el `CRS`, cuando sea posible. No se aconseja el uso de `proj4`.

Transformar de un CRS a otro con la función `st_transform`

```{r}
#| echo: true
st_geometry(nc)[[4]][[2]][[1]][1:3,]
nc.web_mercator <- st_transform(nc, 3857)
st_geometry(nc.web_mercator)[[4]][[2]][[1]][1:3,]
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.2 Datos raster: `{terra}`**

Asignar un `CRS` a un raster. Utilce `EPSG` o `wkt`

```{r}
#| echo: true
crs(r) <- NA
crs(r)
(crs(r) <- crs("+init=epsg:4326")) |> cat()
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.2 Datos raster: `{terra}`**

**Reproyectar**

```{r fig.height=3}
#| echo: true
r <- rast(xmin=-72, xmax=-71, ymin=-37, ymax=-36, ncols=40, nrows=40)
values(r) <- 1:ncell(r)
plot(r)
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.2 Datos raster: `{terra}`**

**Reproyectar**

```{r}
#| echo: true
crs(r) <- crs('EPSG:4326')
(newr <- project(r,y=crs('EPSG:32719')))
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.2 Datos raster: `{terra}`**

**Reproyectar**

```{r fig.height=4}
#| echo: true
plot(newr)
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**4.3 Conversion entre CRS(`{terra}`) y crs(`{sf}`)**

De `sf` a `terra`

```{r}
#| echo: true
new_crs <- crs(st_crs(32719)$wkt)
class(new_crs)
```

De `terra` a `sf`

```{r}
#| echo: true
new_crs2 <- st_crs(crs("EPSG:32719"))
class(new_crs2)
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Necesitamos para poder reproducir

```{r}
#| echo: true
library(sf)
library(spData) 
```

`nz`: geometria de Nueva Zelanda\
`nz_height` : geometría de las mayores alturas en Nueva Zelanda

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=TRUE}
nz
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=TRUE}
str(nz)
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r,echo=TRUE}
nz_height
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
library(tmap)

tmap_mode("view")
tm_shape(nz) + 
  tm_polygons() + 
  tm_shape(nz_height) + 
  tm_dots()
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

`Problema:`Seleccionemos las máximas alturas en Canterbury

alternativa 1

```{r,echo=TRUE}
rows_sel<- nz$Name == 'Canterbury'
canterbury <- nz[rows_sel,]
cant_height <- nz_height[canterbury,]
```

alternativa 2

```{r,echo=TRUE}
canterbury <- nz |> 
  dplyr::filter(Name == 'Canterbury') |> 
  st_join(nz_height |> st_as_sf(geom = 'geometry')) |> plot()

cant_height <- nz_height[canterbury,]
```

Otra alternativa: con operaciones geométricas

```{r,echo=TRUE}
rows_sel<- nz$Name == 'Canterbury'
canterbury <- nz[rows_sel,]
cant_height <- st_intersection(nz_height,canterbury)
```

## 5. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
library(tmap)

tmap_mode("view")
tm_shape(nz) + 
  tm_polygons() + 
  tm_shape(nz_height) + 
  tm_dots() +
  tm_shape(canterbury) + 
  tm_polygons(col='red') + 
  tm_shape(cant_height) +
  tm_dots(col = 'green')
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

`Problema:` calcular la distancia entre el punto de mayor altura en Nueva Zelanda y el centroide da la región de Canterbury.

```{r echo=TRUE,warning=FALSE}
nz_highest <- nz_height[order(-nz_height$elevation),][1,]
canterbury_centroid = st_centroid(canterbury)
```

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
tm_shape(nz_highest) +
  tm_dots(col='red') + 
  tm_shape(canterbury_centroid) +
  tm_dots(col='blue')
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

```{r echo=TRUE}
(st_distance(nz_highest, canterbury_centroid))
```

Dos cosas que hay que notar:\
1. el resultado tiene unidades, indicando que es en metros, no kilometros, pies, etc.\
2. el resultado se entrega en forma de matriz, aunque en este caso tiene un solo valor

`st_distance` devuelve una matriz de distancia. La función tiene la `habilidad` de calcular la distancia entre cualquier combinación de objetos.

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

`Problema:` calcular la distancia entre las regiones de `Canterbury` y `Otago` con las tres primeras altura de `nz_height`

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
co <- nz[grepl("Canter|Otag", nz$Name),]
tm_shape(co) + 
  tm_polygons() +
  tm_shape(nz_height[1:3, ]) +
  tm_dots()
```

## 5. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

```{r echo=TRUE}
(st_distance(nz_height[1:3, ], co))
```

## 6. Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**Subconjunto espacial**

```{r}
#| fig-align: center
library(spData)
library(terra)
elev <- rast(system.file("raster/elev.tif", package = "spData"))
grain <- rast(system.file("raster/grain.tif", package = "spData"))
par(mfrow=c(1,2))
plot(elev,main = 'elev');text(elev);
plot(grain,main = 'grain');text(grain)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

Extrae la posición de la celda con `cellFromXY` y luego con indexación extrae el valor de esa celda con `elev[id]`
```{r}
id = cellFromXY(elev, xy = matrix(c(0.1, 0.1), ncol = 2))
elev[id]
```

Extrae el valor que se encuentra en las coordenadas indicadas con la función `extract`

```{r}
terra::extract(elev, matrix(c(0.1, 0.1), ncol = 2))
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

También se puede extraer utilizando otro raster, como rater de indexación.

```{r}
#| fig-align: center
clip <- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,
            resolution = 0.3, vals = rep(1, 9))
par(mfrow = c(1,2))
plot(elev);text(elev)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

También se puede extraer utilizando otro raster, como rater de indexación.

```{r}
#| fig-align: center
clip <- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,
            resolution = 0.3, vals = rep(1, 9),crs="EPSG:4326")
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(clip,add = TRUE)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

Extraer desde el objeto `elev` los valores que se encuentran en la extensión del objeto `clip`
```{r}
elev[clip] #como valores númericos

elev_clip <- elev[clip,drop = FALSE]
elev_clip
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

La función `crop` sirve para realizar `elev[clip,drop = FALSE]`

```{r}
elev_crop <- crop(elev,clip)
par(mfrow = c(1,2))
plot(elev_clip)
plot(elev_crop)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

**Con indexación**

::: {.columns}
::: {.column width=50%}
```{r}
elev[1:2,]
```
:::
::: {.column width=50%}
```{r}
elev[1:2,drop = FALSE]
```
:::
:::

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**Subconjunto espacial**

Utilizando un raster con valores `lógicos` para ser utilizado como mascara

```{r}
rmask <- elev
values(rmask) <- sample(c(FALSE, TRUE), 36, replace = TRUE)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(rmask)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

```{r}
em <- elev[rmask,drop = FALSE]
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em);text(em)
```


Utilizando un raster con valores `NA` para ser utilizado como mascara con la función `mask`

```{r}
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(rmask,add = TRUE)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

Utilizando un raster con valores `NA` para ser utilizado como mascara. 

Se puede utilizar la función `mask`

```{r}
rmask[isFALSE(rmask)] <- NA #transforma FALSE to NA para aplicar mask
em <- mask(elev,rmask) 
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em);text(em)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.1. Subconjunto espacial**

Se pueden crear mascaras con operaciones lógicas.

```{r}
m <- elev
m[m >30] <- NA
em2 <- mask(elev,m)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(em2);text(em2)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Algebra raster**

Algunas consideraciones

. . .

-   Si usas multiples raster, estos deben tener el mismo punto origen[^1] y la misma resolución
-   Generalmenet tienen la misma extensión, pero si no, devuelve la operación dentro de la intersección de los dos
-   El reciclado de raster en operaciones algebraicas funciona de las misma forma que en el caso de los `atomic vectors`

[^1]: el punto más cercano a la coordenada c(0,0)

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Algebra raster**

Muchas de las operaciones genéricas han sido implementadas

. . .

-   Operaciones: `+, -, *, /,`
-   Operadores lógicos: `>, >=, <, ==, !`
-   Funciones como: `abs, round, ceiling, floor, trunc, sqrt, log, log10, exp, cos, sin, atan, tan, max, min, range, prod, sum, any, all`

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Operaciones locales**

```{r}
e1 <- elev + elev
e2<- elev^2
e3 <- log(elev)
e4 <- elev > 5
par(mfrow=c(1,4))
plot(e1,main = 'elev+elev')
plot(e2,main = 'elev^2')
plot(e3,main = 'log(elev)')
plot(e4,main = 'elev > 5')
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Operaciones locales**

### Reclasificación

Agrupamos los valores por un rango que define una clase y se le asigna un valor

```{r}
rcl <- matrix(c(0, 12, 1, 12, 24, 2, 24, 36, 3), ncol = 3, byrow = TRUE)
rcl
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Operaciones locales**

### Reclasificación

```{r}
recl <- classify(elev, rcl = rcl)
par(mfrow = c(1,2))
plot(elev);text(elev)
plot(recl);text(recl)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Operaciones locales**

Funciones de resumen: `min`, `max`, `mean`, `prod`, `sum`, `Median`, `cv`, `range`, `any`, `all`, siempre devuelven un `SpatRaster`

```{r}
mr <- c(e1,e2,e3,e4) #raster multicapa
names(mr) <- c('elev+elev','elev^2','log(elev)','elev > 5')
plot(mr)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.2. Operaciones locales**

Funciones de resumen: `min`, `max`, `mean`, `prod`, `sum`, `Median`, `cv`, `range`, `any`, `all`, siempre devuelven un `SpatRaster`

```{r}
mr_mean <- mean(mr)
mr_max <- max(mr)
mr_min <- min(mr)
mr_sum <- sum(mr)
par(mfrow= c(1,4))
plot(mr_mean);plot(mr_max);plot(mr_min);plot(mr_sum)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.3. Operaciones globales**

Usar la función `global` para obtener un valor resumen de todo el raster. En general operaciones de estadística descriptiva.

```{r}
global(e1, 'mean')
global(e1, 'max')
global(e1, 'min')
global(e1, 'sum')

```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.3. Operaciones globales**

Cuando se aplica sobre un raster multicapa, devuleve el resultado de la función sobre cada capa del raster.

::: {.columns}
::: {.column width=50%}
```{r}
global(mr, 'mean')
global(mr, 'max')
```
:::
::: {.column width=50%}
```{r}
global(mr, 'min')
global(mr, 'sum')
```
:::
:::

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.4. Unión de rasters (merge)**

Cuando tenemos dos o más raster de una misma área geográfica y queremos unirlos.


```{r}
r1 <- rast(xmin = 0, xmax=5,ymin=0,ymax=5,vals = 1:25,ncol=5,nrow = 5)
r2 <- rast(xmin = 3, xmax=8,ymin=0,ymax=5,vals = 25:1,ncol=5, nrow = 5)
par(mfrow = c(1,2))
plot(r1);text(r1)
plot(r2);text(r2)

```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.4. Unión de rasters (merge)**

Cuando tenemos dos o más raster de una misma área geográfica y queremos unirlos.

```{r}
plot(r1,xlim = c(0,8));text(r1)
plot(r2,add = TRUE);text(r2)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.4. Unión de rasters (merge)**

Para unirlos utilizamos la función `merge`. 

* Los raster deben tener el mismo origen y resolución.

* Los valores del primer raster se mantienen por defecto.


```{r}
m <- merge(r1,r2)
plot(m);text(m)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.4. Unión de rasters (merge)**

* También podemos utilizar la función `mosaic`. 
* `mosaic` permite definir una función para resolver en la zona de intersección, por defecto utiliza el promedio, pero se puede cambiar la función.
* `mosaic` es más lento que `merge`,

```{r}
mos <- mosaic(r1,r2)
plot(mos);text(mos)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.4. Unión de rasters (merge)**

```{r}
mos2 <- mosaic(r1,r2,fun='max')
plot(mos2);text(mos2)
```

## Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**6.5. Función `app`**

```{r}
#| echo: true
elev = rast(system.file("raster/elev.tif", package = "spData"))
elev4 <- c(elev, elev*0.2, elev*1.2,elev*1.5) #raster con 4 capas

res <- app(elev4, \(y){
  df <- data.frame(x=1:4,y=y)
  mod <- lm(y~x,df)
  summary(mod)$coefficients[2,1]
  })

# tendencia lineal (pendiente) para el ajuste entre 1:4 y los valores de los raster
plot(elev4)
```

## 6.1.  Operaciones espaciales con datos raster {.smaller .scrollable background-image="https://rspatial.github.io/terra/reference/figures/logo.png" background-position="97.5% 2.5%" background-size="7.5%"}

**Función `app`**

```{r}
#| echo: true
plot(res);text(res)
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.1 Cortado de raster**

```{r}
#| echo: true
library(spDataLarge)
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
zion = read_sf(system.file("vector/zion.gpkg", package = "spDataLarge"))
zion = st_transform(zion, st_crs(srtm))
```

```{r}
#| echo: false
plot(srtm)
plot(zion,add = TRUE,col='transparent')
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.1. Cortado de raster**

Función de corte `crop`
```{r}
#| echo: true
srtm_cropped = crop(srtm, zion)
```

```{r}
plot(srtm_cropped)
plot(zion,add = TRUE,col='transparent')
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.1. Cortado raster**

Función de mascara `mask`

```{r}
#| echo: true
srtm_masked = mask(srtm, zion)
```

```{r}
plot(srtm_masked)
plot(zion,add = TRUE,col='transparent')
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.1. Cortado de raster**

La mayoría de las veces se utilizaran las dos funciones. `crop` para limitar la estensión y `mask` para reemplazar por NA los valores fuera de la geometría.

```{r}
#| echo: true
srtm_cropped = crop(srtm, zion)
srtm_final = mask(srtm_cropped, zion)
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.1. Cortado de raster**

Argumento inverse = TRUE

```{r}
#| echo: true
srtm_inv_masked = mask(srtm, zion, inverse = TRUE)
```

```{r}
plot(srtm_inv_masked)
plot(zion,add = TRUE,col='transparent')
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.2. Extracción raster**

Desde puntos

```{r}
#| echo: true
data("zion_points", package = "spDataLarge")
elevation = terra::extract(srtm, zion_points)
zion_points = cbind(zion_points, elevation)
```

```{r}
plot(srtm)
plot(zion,col='transparent',add = TRUE)
plot(st_as_sf(zion_points),col='black',lty =1,add = TRUE)
```
## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.2. Extracción raster**

Desde polígono

```{r}
#| echo: true
zion_srtm_values = terra::extract(x = srtm, y = zion)

library(tidyverse)
zion_srtm_values |> as_tibble()
```

## 7. Interacciones raster-vectorial {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**7.2. Extracción raster**

Desde polígono

```{r}
#| echo: true
group_by(zion_srtm_values, ID) |> 
  summarize(across(srtm, list(min = min, mean = mean, max = max)))
```
 
 