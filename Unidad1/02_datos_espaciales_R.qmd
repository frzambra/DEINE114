---
title: 'Análisis Espacial con R'
subtitle: "Datos Espaciales en R"
author: 'Dr. Francisco Zambrano Bigiarini'
institute: "Hemera, Universidad Mayor"
format: 
  revealjs:
    logo: ../imgs/logo_hemera_2024.png
    css: ../logo.css
    revealjs-plugins:
      - drop
    drop:
      shortcut: "]"
slide-number: true
editor: visual
---

## Contenidos {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Datos Espaciales en R

. . .

-   Datos vectoriales

. . .

-   Datos raster

## 1. Datos espaciales en `R` {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de dato espaciales**

-   `Discretos` : datos vectoriales
-   `Continuos` : datos raster

**Simple representación de datos espaciales**

```{r, echo=TRUE}
name <- LETTERS[1:10]
longitude <- c(-116.7, -120.4, -116.7, -113.5, -115.5,
               -120.8, -119.5, -113.7, -113.7, -110.7)
latitude <- c(45.3, 42.6, 38.9, 42.1, 35.7, 38.9,
              36.2, 39, 41.6, 36.9)
stations <- cbind(longitude, latitude)
# Simulated rainfall data
set.seed(0)
precip <- round((runif(length(latitude))*10)^3)
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r eval=FALSE,echo=TRUE}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

### Simple representación de datos espaciales

```{r echo=FALSE,eval=TRUE,fig.height=6}
psize <- 1 + precip/500
plot(stations, cex=psize, pch=20, col='red', main='Precipitation')
# add names to plot
text(stations, name, pos=4)
# add a legend
breaks <- c(100, 250, 500, 1000)
legend.psize <- 1+breaks/500
legend("topright", legend=breaks, pch=20, pt.cex=legend.psize, col='red', bg='gray')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r}
#|eval: false
#|echo: true
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

```{r echo=FALSE,fig.height=6}
lon <- c(-116.8, -114.2, -112.9, -111.9, -114.2, -115.4, -117.7)
lat <- c(41.3, 42.9, 42.4, 39.8, 37.6, 38.3, 37.6)
x <- cbind(lon, lat)
plot(stations, main='Precipitation')
polygon(x, col='blue', border='light blue')
lines(stations, lwd=3, col='red')
points(x, cex=2, pch=20)
points(stations, cex=psize, pch=20, col='red', main='Precipitation')
```

## 1. Datos espaciales {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple representación de datos espaciales**

Podemos almacenar datos espaciales en un `data.frame`

```{r}
wst <- data.frame(longitude, latitude, name, precip)
wst
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`**

-   Utilizaremos `{sf}`

-   Tener cuidado ya que el más utilizado por mucho tiempo fue `{sp}` (mas antiguo)

-   Muchos ejemplos o incluso usos que vean por ahí estarán con los tipos de datos definidos por `{sp}`

-   `{sp}` está siendo (o ya fue) reemplazado por `{sf}`

> **Simple Feature:** se refiere a un estándar formal (ISO 19125-1: 2004) que describe cómo los objetos en el mundo real se pueden representar en computadoras, con énfasis en la geometría espacial de estos objetos.

<https://github.com/r-spatial/sf/>

##  {background-image="figs/sf_image.jpg" background-size="contain"}

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Dimensiones**

-   Todas las geometrias (puntos, lineas, polígonos) están formadas por puntos.
-   2, 3, o 4 dimensiones
-   Todos los puntos en una geometría tienen la misma dimensión
-   Ademas de `X` e `Y` hay dos opciones
    -   coordenada `Z` para altitud
    -   coordenada `M` medición asociada con el punto (ej, tiempo en que fue medido)

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Dimensiones**

-   Cuatro casos posibles:
    -   2D (X,Y), (E, N), (Lon,Lat): `XY`
    -   3D : `XYZ`
    -   3D : `XYM`
    -   4D : `XYZM`

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Tipos de geometrías**

| Tipo                 | Descripción                                                                                                        |
|-------------------------------------------|-----------------------------|
| `POINT`              | geometría dimensión cero, un punto                                                                                 |
| `LINESTRING`         | varios puntos, secuencia de puntos conectados por líneas rectas que no se intersecan; geometría unidimensional     |
| `POLYGON`            | geometría con un área positiva (bidimensional); la secuencia de puntos forma un anillo cerrado que no se interseca |
| `MULTIPOINT`         | grupo de `POINT`                                                                                                   |
| `MULTILINESTRING`    | grupo de `LINESTRING`                                                                                              |
| `MULTIPOLYGON`       | grupo de `POLYGON`                                                                                                 |
| `GEOMETRYCOLLECTION` | grupo de geometrías de cualquier tipo                                                                              |

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clases**

`Geometria` -\> `list-column` (tipo de dato)\
`Atributos` -\> `data.frame`

Como `{sf}` almacena las `Simple Features`.

Los tres tipos de datos utilizados para representarlos son:\
- `sf`: la tabla (`data.frame`) con los atributos y geometría de la entidad , que contiene\
- `sfc` : la `list-colum` con la geometría de cada entidad (registro), que está compuesto de\
- `sfg`: la geometría de la entidad de cada `simple feature` individual

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
library(sf)
nc <- st_read(system.file("shape/nc.shp", package="sf"))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r fig.height=5}
#| echo: true
plot(nc[1])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
class(nc)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
lapply(attributes(nc),'head')
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

```{r}
#| echo: true
print(nc[9:15], n = 3)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sf`**

![](figs/sf_xfig.png)

<i style="color:green">VERDE: Simple Feature individual, atributos + geometría </i>\
<i style="color:blue">AZUL: geometría (objeto de clase `sfg`) </i>\
<i style="color:red">ROJO: Simple Feature `list-column` (`sfc`) </i>

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

`sfc` (simple feature list-column)

**Simple Feature `{sf}`: Clase `sfc`**

```{r}
#| echo: true
(nc_geom <- st_geometry(nc))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r}
#| echo: true
class(nc_geom)
nc_geom[[1]]
class(nc_geom[[1]])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r fig.height=6}
#| echo: true
plot(nc_geom[[1]])
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfc`**

```{r fig.height=6}
#| echo: true
names(attributes(nc_geom))
attr(nc_geom,'crs')
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

`sfg` (simple feature geometry) guarda la geometría de un a entidad individual, ej. un punto, una linea o polígono

Está implementada en en tipos de datos nativos de R (numeric, matrix, list), siguiendo la siguiente regla:

1.  un `POINT` es unj vector numérico
2.  un grupo de puntos, e.j. un `LINESTRING` o un anillo de un `POLYGON` es un `matrix` y cada fila de la `matrix` es un `POINT`
3.  cualquier otro grupo es un `list`

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
(x <- st_point(c(1,2)))
str(x)
(x <- st_point(c(1,2,3)))
str(x)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
(x <- st_point(c(1,2,3), "XYM"))
str(x)
(x <- st_point(c(1,2,3,4)))
str(x)
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
st_zm(x, drop = TRUE, what = "ZM")
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
p <- rbind(c(3.2,4), c(3,4.6), c(3.8,4.4), c(3.5,3.8), c(3.4,3.6), c(3.9,4.5))
(mp <- st_multipoint(p))
s1 <- rbind(c(0,3),c(0,4),c(1,5),c(2,5))
(ls <- st_linestring(s1))
s2 <- rbind(c(0.2,3), c(0.2,4), c(1,4.8), c(2,4.8))
s3 <- rbind(c(0,4.4), c(0.6,5))
(mls <- st_multilinestring(list(s1,s2,s3)))

```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r}
#| echo: true
p1 <- rbind(c(0,0), c(1,0), c(3,2), c(2,4), c(1,4), c(0,0))
p2 <- rbind(c(1,1), c(1,2), c(2,2), c(1,1))
pol <-st_polygon(list(p1,p2))
p3 <- rbind(c(3,0), c(4,0), c(4,1), c(3,1), c(3,0))
p4 <- rbind(c(3.3,0.3), c(3.8,0.3), c(3.8,0.8), c(3.3,0.8), c(3.3,0.3))[5:1,]
p5 <- rbind(c(3,3), c(4,2), c(4,3), c(3,3))
(mpol <- st_multipolygon(list(list(p1,p2), list(p3,p4), list(p5))))
(gc <- st_geometrycollection(list(mp, mpol, ls)))
```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r eval = FALSE}
#| echo: true
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

## 2. Datos espaciales vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Simple Feature `{sf}`: Clase `sfg`**

```{r echo=FALSE,fig.height=6,fig.width=10}
par(mfrow=c(2,3))
plot(mp,col='red',main = 'MULTIPOINT')
plot(ls,col='red',main = 'LINESTRING')
plot(mls,col='red',main = 'MULTILINESTRING')
plot(pol,col = 'gray',border='red',main = 'POLIGON')
plot(mpol,col = 'gray',border='red',main = 'MULTIPOLIGON')
plot(gc,col = 'gray',border='red',main = 'GEOMETRY')

```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

1.  Vamos a utilizar el paquete `{terra}`
2.  `{terra}` está reemplazando a `{raster}`, ya que es más simple y rapido
3.  `{terra}` es nuevo, fue lanzado el 2020:

-   Ya hay documentación y ejemplos
-   Otros paquetes que utilizan datos espaciales se están actualizando para dar soporte a `{terra}`
-   El paso de `{raster}` a `{terra}` no es complicado
-   las funciones son muy similares a `{raster}`.

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

El paquete `{terra}` tiene funciones para crear, leer, manipular y guardar datos raster y vectoriales.

Las clases definidas por `{terra}` son:\
- `SpatRaster`\
- `SpatVector`

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

-   Representa bandas de información.
-   Guarda información número de columnas y filas, extensión espacial, el sistema de referencia de coordenadas, extensión.

```{r}
#| echo: true
library(terra)
(r <- rast(ncol=10, nrow=10, xmax=-80, xmin=-150, ymin=20, ymax=60))
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

El objeto `r` solo tiene el esqueleto del raster, pero aún no tiene valores

```{r}
#echo: true
values(r) <- 1:100
r
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster**

```{r fig.height=5}
#| echo: true
plot(r)
text(r)
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos:spatRaster multicapa**

-   Puede trabajar con un archvivo raster de mutiples capas (Ej, imagen satelital)
-   Puede trabajar con datos raster desde diferentes archivos (Ej., series de tiempos guardados en archivos independientes.

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster multicapa**

```{r}
#| echo: true
r2 <- r * r
r3  <- sqrt(r)
(s <- c(r, r2, r3))
```

## 3. Datos espaciales raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Tipos de datos: spatRaster multicapa**

```{r,echo=FALSE,fig.width=10,fig.height=6}
plot(s)
```

## 4. Manejo de CRS en R {.smaller background-image="../imgs/R_logo.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

-   `Coordenadas geográficas`: esféricas\
-   `Coordenadas proyectadas`: cónica, cilíndrica y planas

Para manejar `CRS` `R` utiliza la librería [`PROJ`](https://proj.org/)

`PROJ.4` fue usado por más de 30 años, luego mutó a $PR \phi J$, dando paso a `PROJ5`, `PROJ6` y ahora `PROJ7`. `PROJ8` en 2021.

Así, hay tres formatos para manejar los `CRS`

-   proj.4
-   EPSG
-   Well-known Text (wkt)

`{sf}` usa wkt (well-known text) o EPSG

`{terra}` usa PROJ.4, wkt o EPSG

## 5. Datos vectoriales: `{sf}` {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Versiones anteriores de `{sf}` (\<0.9) ![](figs/crs_sf1.png)\~

## 5. Datos vectoriales: `{sf}` {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Ahora

```{r}
#| echo: true
st_crs(4326)
```

## 5. Datos vectoriales: `{sf}` {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Recomendación utilizar `EPSG (European Petroleum Survey Group)` y `wkt` para identificar el `CRS`, cuando sea posible. No se aconseja el uso de `proj4`.

Transformar de un CRS a otro con la función `st_transform`

```{r}
#| echo: true
st_geometry(nc)[[4]][[2]][[1]][1:3,]
nc.web_mercator <- st_transform(nc, 3857)
st_geometry(nc.web_mercator)[[4]][[2]][[1]][1:3,]
```

## 6. Datos raster: `{terra}` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Asignar un `CRS` a un raster. Utilce `EPSG` o `wkt`

```{r}
#| echo: true
crs(r) <- NA
crs(r)
(crs(r) <- crs("+init=epsg:4326")) |> cat()
```

## 6. Datos raster: `{terra}` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Reproyectar**

```{r fig.height=3}
#| echo: true
r <- rast(xmin=-72, xmax=-71, ymin=-37, ymax=-36, ncols=40, nrows=40)
values(r) <- 1:ncell(r)
plot(r)
```

## 6. Datos raster: `{terra}` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Reproyectar**

```{r}
#| echo: true
crs(r) <- crs('EPSG:4326')
(newr <- project(r,y=crs('EPSG:32719')))
```

## 6. Datos raster: `{terra}` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Reproyectar**

```{r fig.height=4}
#| echo: true
plot(newr)
```

## 6. Conversion entre CRS(`{terra}`) y crs(`{sf}`)

De `sf` a `terra`

```{r}
#| echo: true
new_crs <- crs(st_crs(32719)$wkt)
class(new_crs)
```

De `terra` a `sf`

```{r}
#| echo: true
new_crs2 <- st_crs(crs("EPSG:32719"))
class(new_crs2)
```

## 7. Algunas operaciones espaciales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Necesitamos para poder reproducir

```{r}
#| echo: true
library(sf)
library(spData) 
```

`nz`: geometria de Nueva Zelanda\
`nz_height` : geometría de las mayores alturas en Nueva Zelanda

## 7. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=TRUE}
nz
```

## 7. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=TRUE}
str(nz)
```

## 7. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r,echo=TRUE}
nz_height
```

## 7. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
library(tmap)

tmap_mode("view")
tm_shape(nz) + 
  tm_polygons() + 
  tm_shape(nz_height) + 
  tm_dots()
```

## 7. Operaciones espaciales con datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

`Problema:`Seleccionemos las máximas alturas en Canterbury

alternativa 1

```{r,echo=TRUE}
rows_sel<- nz$Name == 'Canterbury'
canterbury <- nz[rows_sel,]
cant_height <- nz_height[canterbury,]
```

Otra alternativa: con operaciones geométricas

```{r,echo=TRUE}
rows_sel<- nz$Name == 'Canterbury'
canterbury <- nz[rows_sel,]
cant_height <- st_intersection(nz_height,canterbury)
```

## 7. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Filtrado espacial**

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
library(tmap)

tmap_mode("view")
tm_shape(nz) + 
  tm_polygons() + 
  tm_shape(nz_height) + 
  tm_dots() +
  tm_shape(canterbury) + 
  tm_polygons(col='red') + 
  tm_shape(cant_height) +
  tm_dots(col = 'green')
```

## 7. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

`Problema:` calcular la distancia entre el punto de mayor altura en Nueva Zelanda y el centroide da la región de Canterbury.

```{r echo=TRUE,warning=FALSE}
nz_highest <- nz_height[order(-nz_height$elevation),][1,]
canterbury_centroid = st_centroid(canterbury)
```

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
tm_shape(nz_highest) +
  tm_dots(col='red') + 
  tm_shape(canterbury_centroid) +
  tm_dots(col='blue')
```

## 7. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

```{r echo=TRUE}
(st_distance(nz_highest, canterbury_centroid))
```

Dos cosas que hay que notar:  
1. el resultado tiene unidades, indicando que es en metros, no kilometros, pies, etc.  
2. el resultado se entrega en forma de matriz, aunque en este caso tiene un solo valor

`st_distance` devuelve una matriz de distancia. La función tiene la `habilidad` de calcular la distancia entre cualquier combinación de objetos.

## 7. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

`Problema:` calcular la distancia entre las regiones de `Canterbury` y `Otago` con las tres primeras altura de `nz_height`

```{r,echo=FALSE,message=FALSE,out.width = "100%",out.height="60%"}
co <- nz[grepl("Canter|Otag", nz$Name),]
tm_shape(co) + 
  tm_polygons() +
  tm_shape(nz_height[1:3, ]) +
  tm_dots()
```

## 7. Operaciones espaciales en datos vectoriales {.smaller background-image="../imgs/logo_sf.gif" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Distancia**

```{r echo=TRUE}
(st_distance(nz_height[1:3, ], co))
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

Usaremos los datos: 1. `elev` : datos `raster` de elevación en metros. 2. `grain` : datos `raster` de granulométricos

```{r}
#| echo: true
elev = rast(system.file("raster/elev.tif", package = "spData"))
grain = rast(system.file("raster/grain.tif", package = "spData"))

```

```{r echo=FALSE,out.width='100%',fig.height=3,message=FALSE}
library(terra)
par(mfrow=c(1,2))
plot(elev, main='elev')
plot(grain, main='grain')
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Subset espacial**

Funciones `{terra}`: `cellFromXY` `extract`

Problema: extraer los valores de elevación que están a 0.1 unidades desde el origen.

```{r echo=TRUE}
id = cellFromXY(elev, xy = matrix(c(-0.1, -0.1),ncol=2))
elev[id]
terra::extract(elev, data.frame(x = -0.1, y = -0.1))
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Subset espacial**

Se pueden realizar subset con otros datos raster.

```{r echo=TRUE}
clip <- rast(xmin = 0.9, xmax = 1.8, ymin = -0.45, ymax = 0.45,
              res = 0.3, vals = rep(1, 9))
elev[clip]
```

------------------------------------------------------------------------

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Subset espacial**

-   Hasta ahora los subset devuelven los valores numéricos.
-   Si queremos que el resultado sea entregado como objeto espacial¿?

```{r echo=TRUE}
s1 <- elev[1:2, drop = FALSE]
s2 <- elev[1, 1:2, drop = FALSE]
elev[clip, drop = FALSE]
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Subset espacial**

Otro caso comun de subset espacial es utilizar una `mascara` lógica (con NA y 1).

```{r echo=TRUE, fig.height=4}
rmask <- elev
values(rmask) <- sample(c(NA, 1), 36, replace = TRUE)
plot(rmask)
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Subset espacial**

```{r echo=TRUE, fig.height=4,out.width='100%'}
s4 <- elev[rmask, drop = FALSE]           # with [ operator
s5 <- mask(elev, rmask)                   # with mask()

par(mfrow=c(1,2))
plot(s4);plot(s5)
```

## 8. Operaciones espaciales en datos raster {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

**Operaciones locales**

Algebra raster

```{r echo=TRUE,results=FALSE}
elev + elev
elev^2
log(elev)
elev > 5
```

## Función `app` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r}
#| echo: true
elev4 <- c(elev, elev*0.2, elev*1.2,elev*1.5) #raster con 4 capas

res <- app(elev4, \(y){
  df <- data.frame(x=1:4,y=y)
  mod <- lm(y~x,df)
  summary(mod)$coefficients[2,1]
  })

# tendencia lineal (pendiente) para el ajuste entre 1:4 y los valores de los raster
plot(elev4)
```

## Función `app` {.smaller background-image="../imgs/logo_terra.png" background-position="97.5% 2.5%" background-size="7.5%" layout="true"}

```{r}
#| echo: true
plot(res);text(res)
```
